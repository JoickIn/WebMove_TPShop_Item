#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————#
#【步骤 3 -----> 登录页面设置】:
# (1): -> 首先输入用户名输入密码点击登录。
#      -> 在登录的页面我们要创建一个 LoginPage.py 的页面。
#      -> 然后去 LoginPage.py 页面去进行配置。
#      -> 然后在 Page.py 页面去增加一些内容。
#      -> 然后在 test_login 脚本页面也去添加执行步骤。
#      -> 然后当我在最后点击登录按钮的时候会给我弹出一个【登录成功的显示框】那么我们要进行判断是否出现了【登录成功】这 4 个
#         字,如果出现了这 4 个字我的脚本是通过的,相反就是不通过,那么我们的做法就是:
#         (1): 看前置代码是否写了那行代码。
#         (2): 判断获取某一个字符串是否出现了。那么我们要去封装一个方法。那么比如说我在 test_login 里面的(5.3.3)之后写一个
#              这样的方法,然后我们简单看(5.3.4)。
#         (3): 那么就是说这样的方法我们可能会经常的用到,那么我们考虑把他个封装到 BaseAction 的里面去。然后看base_action 里
#              面的 (2) 去写公共的函数。
#         (4): 然后我们在回到 test_login 里面去调用这个我们封装好的方法。看 test_login(5.3.4)
#
#
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————#
# (2): -> 修改 find_element 的时间,那么就是说这个 toast 他也就 2 到 3 秒之后就消失了,那么就是说如果一个 toast 弹
#         出页面他是存在的那么等这个 fine_element 里面封装好的默认 10 秒他就有出现了,如果说这个 toast 他是不存在的
#         话,那么这个时候我们的脚本就要等待一个不存在的 toast 10 秒之后然后在给你报错,那么就是说这个等待的 10 秒基本
#         就没啥用,因为 toast 本来设计的时候就是提示一下,2-3秒之后就会消失没了,所以说我们希望让他的等待的时间变的尽可
#         能的短能节就节省,那么我们回到 base_action 页面看 (2.2) 的更新 (1)和更新(2)
#
#
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————#
# (3): -> 登录的参数化
#         解答: 要创建一个 data 文件夹,里面的文件是 yaml 格式或者 yml 格式的文件,名字要和 scripts 脚
#               本里面的文件的名字是相同的才可以。比如说: scripts 页面是 test_login.py 文件那么对应的
#               就应该是 data 文件夹里面去创建一个: test_login_data.yml 文件。
#      -> 然后来到 data 文件里面看 test_login_data.yml 数据文件去进行一个配置。
#      -> 然后来到 scripts 文件的 test_login.py 文件里面去配置参数化。看里面的(6)系列。
#
#
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————#
# (4): -> 登录步骤
#         解答: 在登录的过程中添加步骤。
#      -> 去各个的 page.py 页面的函数头上进行配置步骤和针对的添加描述信息。
#      -> 然后去 pytest.ini 的文件里面去配置报告的 xml 格式。
#      -> 然后黑窗口输入: html的图形化界面的报告 -> allure generate report/ -o report/html --clean





















#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————#